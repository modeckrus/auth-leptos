cargo-features = ["codegen-backend"]
[package]
name = "auth-leptos"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
axum = { version = "0.7", features = [
  "macros",
  "tokio",
  "ws",
  "http2",
  "json",
], optional = true }
axum-core = { version = "0.4.3", optional = true }
console_error_panic_hook = "0.1"
console_log = "1"
cfg-if = "1"
leptos = { version = "0.6", features = ["nightly"] }
leptos_axum = { version = "0.6", optional = true }
leptos_meta = { version = "0.6", features = ["nightly"] }
leptos_router = { version = "0.6", features = ["nightly"] }
leptos-use = "0.13"
log = "0.4"
simple_logger = "5"
tokio = { version = "1", features = ["full"], optional = true }
tower = { version = "0.5", features = ["util"], optional = true }
tower-http = { version = "0.6.2", features = ["fs"], optional = true }
wasm-bindgen = "=0.2.95"
thiserror = "2"
tracing = { version = "0.1", optional = true }
http = "1"
serde = { version = "1.0.193", features = ["derive", "rc"] }
tower-cookies = { version = "0.10", optional = true }
web-sys = { version = "0.3", features = [
  "AbortController",
  "AbortSignal",
  "HtmlDocument",
  'CanvasRenderingContext2d',
  'Document',
  'Element',
  'HtmlCanvasElement',
  'Window',
] }
js-sys = "0.3"
cookie = "0.18.0"
chrono = { version = "0.4.31", features = ["serde"] }
async-std = { version = "1.12.0", optional = true }
rand = "0.8.5"
anyhow = "1"
codee = "0.2"
surrealsdk = { path = "../surrealsdk/surrealsdk", optional = true }
nanoid = "*"

[features]
hydrate = [
  "leptos/hydrate",
  "leptos_meta/hydrate",
  "leptos_router/hydrate",
  "dep:async-std",
]
ssr = [
  "dep:axum",
  "dep:tokio",
  "dep:tower",
  "dep:tower-http",
  "dep:leptos_axum",
  "leptos/ssr",
  "leptos_meta/ssr",
  "leptos_router/ssr",
  "dep:tracing",
  "dep:tower-cookies",
  "leptos-use/ssr",
  "leptos-use/axum",
  "dep:surrealsdk",
]

# Defines a size-optimized profile for the WASM bundle in release mode
[profile.wasm-release]
inherits = "release"
opt-level = 'z'
lto = true
codegen-units = 1
panic = "abort"

[profile.dev.build-override]
opt-level = 3

[profile.dev.package."*"]
opt-level = 3

[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
output-name = "auth-leptos"

# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"

# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"

# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
style-file = "style/output.css"
# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "public"

# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:3000"

# The port to use for automatic reload monitoring
reload-port = 3001

# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
# end2end-cmd = "npx playwright test"
# end2end-dir = "end2end"

#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"

# Set by cargo-leptos watch when building with that tool. Controls whether autoreload JS will be included in the head
watch = false

# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"

# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false

# The profile to use for the lib target when compiling for release
#
# Optional. Defaults to "release".
lib-profile-release = "wasm-release"
